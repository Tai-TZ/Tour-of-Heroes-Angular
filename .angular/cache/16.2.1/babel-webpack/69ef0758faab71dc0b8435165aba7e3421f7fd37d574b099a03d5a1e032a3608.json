{"ast":null,"code":"var _class;\nimport { of } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n    this.heroesUrl = 'api/heroes'; // URL web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  log(message) {\n    this.messageService.add(`HeroService:${message} `);\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error); // log to console instead\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')),\n    //sử dụng để thực hiện 1 hành động phụ như ghi log\n    catchError(this.handleError('getHeroes', [])));\n  }\n  /**\n   * getHero: + Xây dựng URL với id\n   *          + trả về 1 đối tượng <Hero>\n   *  */\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetch hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`update hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n}\n_class = HeroService;\n_class.ɵfac = function HeroService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["of","HttpHeaders","catchError","tap","HeroService","constructor","messageService","http","heroesUrl","httpOptions","headers","log","message","add","handleError","operation","result","error","console","getHeroes","get","pipe","_","getHero","id","url","updateHero","hero","put","i0","ɵɵinject","i1","MessageService","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/tai/Desktop/Intern/tour-of-heroes/src/app/hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes'\nimport { Observable, of } from 'rxjs';\nimport { MessageService } from './message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators'\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n  private heroesUrl = 'api/heroes';  // URL web api\n\n\n\n  constructor(private messageService: MessageService, private http: HttpClient) {  //tiem MessageService vao \n\n  }\n\n  private log(message: string) {\n    this.messageService.add(`HeroService:${message} `)\n  }\n\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      console.error(error); // log to console instead\n\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n\n\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(_ => this.log('fetched heroes')), //sử dụng để thực hiện 1 hành động phụ như ghi log\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n      );\n  }\n\n\n\n  /**\n   * getHero: + Xây dựng URL với id \n   *          + trả về 1 đối tượng <Hero>  \n   *  */\n  getHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/${id}}`;\n    return this.http.get<Hero>(url).pipe(\n      tap(_ => this.log(`fetch hero id=${id}`)),\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\n    )\n  }\n\n\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  }\n  updateHero(hero: Hero): Observable<any> {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap(_ => this.log(`update hero id=${hero.id}`)),\n      catchError(this.handleError<any>('updateHero'))\n    )\n\n  }\n\n\n}\n"],"mappings":";AAGA,SAAqBA,EAAE,QAAQ,MAAM;AAErC,SAAqBC,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;;AAIrD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,cAA8B,EAAUC,IAAgB;IAAxD,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,IAAI,GAAJA,IAAI;IAJxD,KAAAC,SAAS,GAAG,YAAY,CAAC,CAAE;IAmDnC,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIT,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EA/CD;EAEQU,GAAGA,CAACC,OAAe;IACzB,IAAI,CAACN,cAAc,CAACO,GAAG,CAAC,eAAeD,OAAO,GAAG,CAAC;EACpD;EAGQE,WAAWA,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnCC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB,IAAI,CAACN,GAAG,CAAC,GAAGI,SAAS,YAAYE,KAAK,CAACL,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOZ,EAAE,CAACgB,MAAW,CAAC;IACxB,CAAC;EACH;EAIAG,SAASA,CAAA;IACP,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAS,IAAI,CAACZ,SAAS,CAAC,CACzCa,IAAI,CACHlB,GAAG,CAACmB,CAAC,IAAI,IAAI,CAACX,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAAE;IACtCT,UAAU,CAAC,IAAI,CAACY,WAAW,CAAS,WAAW,EAAE,EAAE,CAAC,CAAC,CACtD;EACL;EAIA;;;;EAIAS,OAAOA,CAACC,EAAU;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACjB,SAAS,IAAIgB,EAAE,GAAG;IACtC,OAAO,IAAI,CAACjB,IAAI,CAACa,GAAG,CAAOK,GAAG,CAAC,CAACJ,IAAI,CAClClB,GAAG,CAACmB,CAAC,IAAI,IAAI,CAACX,GAAG,CAAC,iBAAiBa,EAAE,EAAE,CAAC,CAAC,EACzCtB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAO,cAAcU,EAAE,EAAE,CAAC,CAAC,CACvD;EACH;EAOAE,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACpB,IAAI,CAACqB,GAAG,CAAC,IAAI,CAACpB,SAAS,EAAEmB,IAAI,EAAE,IAAI,CAAClB,WAAW,CAAC,CAACY,IAAI,CAC/DlB,GAAG,CAACmB,CAAC,IAAI,IAAI,CAACX,GAAG,CAAC,kBAAkBgB,IAAI,CAACH,EAAE,EAAE,CAAC,CAAC,EAC/CtB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAM,YAAY,CAAC,CAAC,CAChD;EAEH;;SA7DWV,WAAW;;mBAAXA,MAAW,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;AAAA;;SAAX9B,MAAW;EAAA+B,OAAA,EAAX/B,MAAW,CAAAgC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}